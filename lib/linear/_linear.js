"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports._linear = _linear;
/**
 * Finds the largest difference of two consecutive input numbers. There must be
 * at least two input numbers.
 *
 * @param {Number[]} numbers - The input numbers (at least two).
 * @returns {Number[2]} - The indices of the consecutive numbers that define the maximum gap.
 */
function _linear(numbers) {

	var n = numbers.length;
	var min = numbers[0];
	var max = min;

	for (var i = 1; i < n; ++i) {
		var x = numbers[i];
		if (x < min) min = x;else if (x > max) max = x;
	}

	var w = max - min;

	var N = n - 1;

	var l = new Array(N); // lower bound of each interval
	var L = new Uint32Array(N); // lower bound index of each interval
	var u = new Array(N); // upper bound of each interval
	var U = new Uint32Array(N); // upper bound index of each interval
	var c = new Uint32Array(N); // check if interval is hit

	for (var _i = 0; _i < n; ++_i) {

		var _x = numbers[_i];

		var j = Math.floor(N * ((_x - min) / w));

		if (c[j] === 0) {
			l[j] = u[j] = _x;
			L[j] = U[j] = _i;
			c[j] = 1;
		} else if (_x < l[j]) {
			l[j] = _x;
			L[j] = _i;
		} else if (_x > u[j]) {
			u[j] = _x;
			U[j] = _i;
		}
	}

	var q = 1;

	// because min and max are included in the buckets
	// we know that c[0] and c[N-1] contain something
	while (c[q] === 0) {
		++q;
	}var gap = l[q] - u[0];

	var a = U[0];
	var b = L[q];

	for (var _j = q + 1; _j < N; ++_j) {

		while (c[_j] === 0) {
			++_j;
		}var g = l[_j] - u[q];

		if (g > gap) {
			gap = g;
			a = U[q];
			b = L[_j];
		}

		q = _j;
	}

	return [a, b];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saW5lYXIvX2xpbmVhci5qcyJdLCJuYW1lcyI6WyJfbGluZWFyIiwibnVtYmVycyIsIm4iLCJsZW5ndGgiLCJtaW4iLCJtYXgiLCJpIiwieCIsInciLCJOIiwibCIsIkFycmF5IiwiTCIsIlVpbnQzMkFycmF5IiwidSIsIlUiLCJjIiwiaiIsIk1hdGgiLCJmbG9vciIsInEiLCJnYXAiLCJhIiwiYiIsImciXSwibWFwcGluZ3MiOiI7Ozs7O1FBT2dCQSxPLEdBQUFBLE87QUFQaEI7Ozs7Ozs7QUFPTyxTQUFTQSxPQUFULENBQW1CQyxPQUFuQixFQUE2Qjs7QUFFbkMsS0FBTUMsSUFBSUQsUUFBUUUsTUFBbEI7QUFDQSxLQUFJQyxNQUFNSCxRQUFRLENBQVIsQ0FBVjtBQUNBLEtBQUlJLE1BQU1ELEdBQVY7O0FBRUEsTUFBTSxJQUFJRSxJQUFJLENBQWQsRUFBa0JBLElBQUlKLENBQXRCLEVBQTBCLEVBQUVJLENBQTVCLEVBQWdDO0FBQy9CLE1BQU1DLElBQUlOLFFBQVFLLENBQVIsQ0FBVjtBQUNBLE1BQUtDLElBQUlILEdBQVQsRUFBZUEsTUFBTUcsQ0FBTixDQUFmLEtBQ0ssSUFBS0EsSUFBSUYsR0FBVCxFQUFlQSxNQUFNRSxDQUFOO0FBQ3BCOztBQUVELEtBQU1DLElBQUlILE1BQU1ELEdBQWhCOztBQUVBLEtBQU1LLElBQUlQLElBQUksQ0FBZDs7QUFFQSxLQUFNUSxJQUFJLElBQUlDLEtBQUosQ0FBV0YsQ0FBWCxDQUFWLENBaEJtQyxDQWdCUjtBQUMzQixLQUFNRyxJQUFJLElBQUlDLFdBQUosQ0FBaUJKLENBQWpCLENBQVYsQ0FqQm1DLENBaUJGO0FBQ2pDLEtBQU1LLElBQUksSUFBSUgsS0FBSixDQUFXRixDQUFYLENBQVYsQ0FsQm1DLENBa0JSO0FBQzNCLEtBQU1NLElBQUksSUFBSUYsV0FBSixDQUFpQkosQ0FBakIsQ0FBVixDQW5CbUMsQ0FtQkY7QUFDakMsS0FBTU8sSUFBSSxJQUFJSCxXQUFKLENBQWlCSixDQUFqQixDQUFWLENBcEJtQyxDQW9CRjs7QUFFakMsTUFBTSxJQUFJSCxLQUFJLENBQWQsRUFBa0JBLEtBQUlKLENBQXRCLEVBQTBCLEVBQUVJLEVBQTVCLEVBQWdDOztBQUUvQixNQUFNQyxLQUFJTixRQUFRSyxFQUFSLENBQVY7O0FBRUEsTUFBTVcsSUFBSUMsS0FBS0MsS0FBTCxDQUFZVixLQUFNLENBQUVGLEtBQUlILEdBQU4sSUFBY0ksQ0FBcEIsQ0FBWixDQUFWOztBQUVBLE1BQUtRLEVBQUVDLENBQUYsTUFBUyxDQUFkLEVBQWtCO0FBQ2pCUCxLQUFFTyxDQUFGLElBQU9ILEVBQUVHLENBQUYsSUFBT1YsRUFBZDtBQUNBSyxLQUFFSyxDQUFGLElBQU9GLEVBQUVFLENBQUYsSUFBT1gsRUFBZDtBQUNBVSxLQUFFQyxDQUFGLElBQU8sQ0FBUDtBQUNBLEdBSkQsTUFNSyxJQUFLVixLQUFJRyxFQUFFTyxDQUFGLENBQVQsRUFBZ0I7QUFDcEJQLEtBQUVPLENBQUYsSUFBT1YsRUFBUDtBQUNBSyxLQUFFSyxDQUFGLElBQU9YLEVBQVA7QUFDQSxHQUhJLE1BS0EsSUFBS0MsS0FBSU8sRUFBRUcsQ0FBRixDQUFULEVBQWdCO0FBQ3BCSCxLQUFFRyxDQUFGLElBQU9WLEVBQVA7QUFDQVEsS0FBRUUsQ0FBRixJQUFPWCxFQUFQO0FBQ0E7QUFFRDs7QUFFRCxLQUFJYyxJQUFJLENBQVI7O0FBRUE7QUFDQTtBQUNBLFFBQVFKLEVBQUVJLENBQUYsTUFBUyxDQUFqQjtBQUFxQixJQUFFQSxDQUFGO0FBQXJCLEVBRUEsSUFBSUMsTUFBTVgsRUFBRVUsQ0FBRixJQUFPTixFQUFFLENBQUYsQ0FBakI7O0FBRUEsS0FBSVEsSUFBSVAsRUFBRSxDQUFGLENBQVI7QUFDQSxLQUFJUSxJQUFJWCxFQUFFUSxDQUFGLENBQVI7O0FBRUEsTUFBTSxJQUFJSCxLQUFJRyxJQUFJLENBQWxCLEVBQXNCSCxLQUFJUixDQUExQixFQUE4QixFQUFFUSxFQUFoQyxFQUFvQzs7QUFFbkMsU0FBUUQsRUFBRUMsRUFBRixNQUFTLENBQWpCO0FBQXFCLEtBQUVBLEVBQUY7QUFBckIsR0FFQSxJQUFNTyxJQUFJZCxFQUFFTyxFQUFGLElBQU9ILEVBQUVNLENBQUYsQ0FBakI7O0FBRUEsTUFBS0ksSUFBSUgsR0FBVCxFQUFlO0FBQ2RBLFNBQU1HLENBQU47QUFDQUYsT0FBSVAsRUFBRUssQ0FBRixDQUFKO0FBQ0FHLE9BQUlYLEVBQUVLLEVBQUYsQ0FBSjtBQUNBOztBQUVERyxNQUFJSCxFQUFKO0FBRUE7O0FBRUQsUUFBTyxDQUFFSyxDQUFGLEVBQU1DLENBQU4sQ0FBUDtBQUVBIiwiZmlsZSI6Il9saW5lYXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEZpbmRzIHRoZSBsYXJnZXN0IGRpZmZlcmVuY2Ugb2YgdHdvIGNvbnNlY3V0aXZlIGlucHV0IG51bWJlcnMuIFRoZXJlIG11c3QgYmVcbiAqIGF0IGxlYXN0IHR3byBpbnB1dCBudW1iZXJzLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyW119IG51bWJlcnMgLSBUaGUgaW5wdXQgbnVtYmVycyAoYXQgbGVhc3QgdHdvKS5cbiAqIEByZXR1cm5zIHtOdW1iZXJbMl19IC0gVGhlIGluZGljZXMgb2YgdGhlIGNvbnNlY3V0aXZlIG51bWJlcnMgdGhhdCBkZWZpbmUgdGhlIG1heGltdW0gZ2FwLlxuICovXG5leHBvcnQgZnVuY3Rpb24gX2xpbmVhciAoIG51bWJlcnMgKSB7XG5cblx0Y29uc3QgbiA9IG51bWJlcnMubGVuZ3RoIDtcblx0bGV0IG1pbiA9IG51bWJlcnNbMF0gO1xuXHRsZXQgbWF4ID0gbWluIDtcblxuXHRmb3IgKCBsZXQgaSA9IDEgOyBpIDwgbiA7ICsraSApIHtcblx0XHRjb25zdCB4ID0gbnVtYmVyc1tpXSA7XG5cdFx0aWYgKCB4IDwgbWluICkgbWluID0geCA7XG5cdFx0ZWxzZSBpZiAoIHggPiBtYXggKSBtYXggPSB4IDtcblx0fVxuXG5cdGNvbnN0IHcgPSBtYXggLSBtaW4gO1xuXG5cdGNvbnN0IE4gPSBuIC0gMSA7XG5cblx0Y29uc3QgbCA9IG5ldyBBcnJheSggTiApIDsgLy8gbG93ZXIgYm91bmQgb2YgZWFjaCBpbnRlcnZhbFxuXHRjb25zdCBMID0gbmV3IFVpbnQzMkFycmF5KCBOICkgOyAvLyBsb3dlciBib3VuZCBpbmRleCBvZiBlYWNoIGludGVydmFsXG5cdGNvbnN0IHUgPSBuZXcgQXJyYXkoIE4gKSA7IC8vIHVwcGVyIGJvdW5kIG9mIGVhY2ggaW50ZXJ2YWxcblx0Y29uc3QgVSA9IG5ldyBVaW50MzJBcnJheSggTiApIDsgLy8gdXBwZXIgYm91bmQgaW5kZXggb2YgZWFjaCBpbnRlcnZhbFxuXHRjb25zdCBjID0gbmV3IFVpbnQzMkFycmF5KCBOICkgOyAvLyBjaGVjayBpZiBpbnRlcnZhbCBpcyBoaXRcblxuXHRmb3IgKCBsZXQgaSA9IDAgOyBpIDwgbiA7ICsraSApIHtcblxuXHRcdGNvbnN0IHggPSBudW1iZXJzW2ldIDtcblxuXHRcdGNvbnN0IGogPSBNYXRoLmZsb29yKCBOICogKCAoIHggLSBtaW4gKSAvIHcgKSApIDtcblxuXHRcdGlmICggY1tqXSA9PT0gMCApIHtcblx0XHRcdGxbal0gPSB1W2pdID0geCA7XG5cdFx0XHRMW2pdID0gVVtqXSA9IGkgO1xuXHRcdFx0Y1tqXSA9IDEgO1xuXHRcdH1cblxuXHRcdGVsc2UgaWYgKCB4IDwgbFtqXSApIHtcblx0XHRcdGxbal0gPSB4IDtcblx0XHRcdExbal0gPSBpIDtcblx0XHR9XG5cblx0XHRlbHNlIGlmICggeCA+IHVbal0gKSB7XG5cdFx0XHR1W2pdID0geCA7XG5cdFx0XHRVW2pdID0gaSA7XG5cdFx0fVxuXG5cdH1cblxuXHRsZXQgcSA9IDEgO1xuXG5cdC8vIGJlY2F1c2UgbWluIGFuZCBtYXggYXJlIGluY2x1ZGVkIGluIHRoZSBidWNrZXRzXG5cdC8vIHdlIGtub3cgdGhhdCBjWzBdIGFuZCBjW04tMV0gY29udGFpbiBzb21ldGhpbmdcblx0d2hpbGUgKCBjW3FdID09PSAwICkgKytxIDtcblxuXHRsZXQgZ2FwID0gbFtxXSAtIHVbMF0gO1xuXG5cdGxldCBhID0gVVswXSA7XG5cdGxldCBiID0gTFtxXSA7XG5cblx0Zm9yICggbGV0IGogPSBxICsgMSA7IGogPCBOIDsgKytqICkge1xuXG5cdFx0d2hpbGUgKCBjW2pdID09PSAwICkgKytqIDtcblxuXHRcdGNvbnN0IGcgPSBsW2pdIC0gdVtxXSA7XG5cblx0XHRpZiAoIGcgPiBnYXAgKSB7XG5cdFx0XHRnYXAgPSBnIDtcblx0XHRcdGEgPSBVW3FdIDtcblx0XHRcdGIgPSBMW2pdIDtcblx0XHR9XG5cblx0XHRxID0gaiA7XG5cblx0fVxuXG5cdHJldHVybiBbIGEgLCBiIF0gO1xuXG59XG4iXX0=